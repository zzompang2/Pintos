			+---------------------------+
			|           CS 330          |
			| PROJECT 3: VIRTUAL MEMORY |
			|	     DESIGN DOCUMENT      |
			+---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

ChangSu Ham <zzompang2@kaist.ac.kr>
SeokJun Kim <kimogin@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

cs330 수업 자료 ( vm-reduced.ppt)

https://web.stanford.edu/~ouster/cgi-bin/cs140-winter16/pintos/pintos_4.html#SEC53
	Pintos #2 Document


			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- vm/page.h:

	- struct page
		{
			struct hash_elem hash_elem; 	/* 해쉬 테이블 사용을 위한 구조체 */
			struct list_elem mmap_elem;   /* mmap_list에서 사용하는 list_elem 구조체 */
			void *upage;                 	/* 유저 메모리의 주소 */
			char file_name[15];						/* 파일 이름 */
			int32_t ofs;									/* 파일을 읽기 시작하는 위치 */
			uint32_t read_bytes;					/* 파일에서 읽어야 하는 바이트 개수 */
			uint32_t zero_bytes; 					/* PGSIZE - read_bytes 바이트  */
			bool writable;								/* indicate if segment is writable */
			enum status status;						/* 현재 페이지의 상태 */
			uint32_t swap_index;					/* swap 테이블에 있을 경우의 index */
			struct lock pin_lock;					/* 파일을 읽고 있다는 것을 알려주기 위한 락 */
			int mapid;										/* mmap 으로 생긴 페이지일 경우의 map id */
		};

	- enum status											/* 유저 메모리의 상태 */
		{
			UNLOAD = 0,										/* 페이지가 로딩전인 상태 */
			IN_MEMORY,										/* 페이지가 물리 메모리에 적재되어 있는 상태 */
			IN_DISK												/* 페이지가 swap disk에 적재되어 있는 상태 */
		};

- vm/frame.h:

	- struct list frame_table;        /* 물리 메모리를 관리해주는 구조체 */

	- struct frame										/*  할당한 프래밍을 나타내주는 구조체 */
		{
			struct list_elem elem; 				/* frame_table list를 위한 구조체 */
			void *upage;                	/* 프래임을 매팡하는 유저 페이지 */
		};

 - thread.h:

  - struct thread
    {
			...
			struct hash upage_table;			/* 유저 페이지를 관리하는 해쉬 테이블 */
			...
		}
	

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
	현재 물리 메모리에 어떤 유저 페이지를 적재했는지 알기 위해서 frame table이라는 
	구조체를 만들었다. frame_table은 struct frame을 보관하는 list이며
	struct frame 안에는 프레임을 가르키는 유저 페이지가 저장되어 있다. 그
	페이지의 상태는 In_MEMORY 다. 따라서, 각 프로세스마다 관리하고 있는 
	upage_table 에서 물리 메모리에 적재된 유저 페이지를 알기 위해 각 페이지의
	상태를 확인하면 된다. 또한, 어떤 유저 페이지가 물리 메모리에 적재되어 있는지
	알기 위해선 frame_table안에 있는지 확인하면 된다.   

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
	모든 메모리의 접근을 유저의 가상 메모리 통해서 접근하도록 만들었다. 따라서,
	alias의 상황에서도 물리 프레임을 문제없이 접근할 수 있다.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
	할당할 수 있는 물리 메모리의 프래임을 알기 위해서 palloc_get_page() 함수를
	사용했다. 이 함수 안에서는 빈 프래임을 찾고 할당하는 bitmap_scan_and_flip()
	이라는 함수를 실행하기 위해 lock을 사용한다. 따라서, 최대 하나의 프로세스만
	bitmap을 접근하고 bitmap_scan_and_flip() 함수를 호출할 수 있다. 따라서,
	두 개 혹은 그 이상의 프로세스에게 같은 프래임을 할당할 수 없게 된다.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
	1. upage_table
	upage_table은 lazy loading을 구현하기 위해 사용했다. process을 처음
	실행하고 load 할 때, 바로 물리 메모리에 적재하지 않고 필요시 적재하도록
	구현하였다. load를 하지 않았기 때문에, 그 유저 메모리에 접근하면 page
	fault가 발생한다. 그러면 upage_table에 사용하여 page fault가 난 
	주소가 upage_table 안에 있는 유저 페이지의 영역안에 있는지 확인한다. 있다면,
	비로시 load_segment 함수를 사용하여 실제로 loading한다.
	2. struct page
	프로세스를 실행하지 않고 upage_table 에 적재할 때, 페이지의 정보를 저장해야
	한다. 예를 들어, 필요시 물리 메모리에 loading 할 때 파일에서 어디서 부터
	얼마만큼 읽을 건지 등 필요한 정보가 몇 가지 있다. 이런 정보를 저장해주기
	위해 struct page 구조체를 만들었다.
	3. enum status 
	유저 페이지가 어떤 상태인지 알기 위해서 만든 구조체이다. 예를 들어, 접근한
	유저 페이지가 전에 DISK으로 swap_out 된 페이지인 경우, 물리 메모리에서
	다른 페이지를 내쫒아야 한다. 또한, 아직 로딩하지 않은 페이지만 실제 
	load_segment() 함수를 통해서 로딩을 진행하도록 해야 한다. 이런 상황을 
	효율적으로 구현해주기 위해 각 페이지 구조체안에 UNLOAD, IN_MEMORY, 혹은 
	IN_DISK라는 상태를 지니게 해주었다. 

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- vm/swap.c:

	- struct bitmap *swap_bitmap;  /* swap disk 에 할당된 부분을 관리해주는 bitmap */
	- struct block *swap_block;		 /*  swap disk를 위한 block device */ 
	- struct lock swap_lock;			 /* 안전하게 swapping을 하기 위한 lock */

- vm/page.h:

	- struct page
		{
			struct hash_elem hash_elem; 	/* 해쉬 테이블 사용을 위한 구조체 */
			struct list_elem mmap_elem;   /* mmap_list에서 사용하는 list_elem 구조체 */
			void *upage;                 	/* 유저 메모리의 주소 */
			char file_name[15];						/* 파일 이름 */
			int32_t ofs;									/* 파일을 읽기 시작하는 위치 */
			uint32_t read_bytes;					/* 파일에서 읽어야 하는 바이트 개수 */
			uint32_t zero_bytes; 					/* PGSIZE - read_bytes 바이트  */
			bool writable;								/* indicate if segment is writable */
			enum status status;						/* 현재 페이지의 상태 */
			uint32_t swap_index;					/* swap 테이블에 있을 경우의 index */
			struct lock pin_lock;					/* 파일을 읽고 있다는 것을 알려주기 위한 락 */
			int mapid;										/* mmap 으로 생긴 페이지일 경우의 map id */
		};

	- enum status											/* 유저 메모리의 상태 */
		{
			UNLOAD = 0,										/* 페이지가 로딩전인 상태 */
			IN_MEMORY,										/* 페이지가 물리 메모리에 적재되어 있는 상태 */
			IN_DISK												/* 페이지가 swap disk에 적재되어 있는 상태 */
		};


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
	우리는 LRU algorithm을 사용하여 내쫓을 프래임을 결정하였다. 먼저 
	우리는 물리 메모리를 관리해주는 frame_table안에 새로운 할당한 페이지를 
	무조건 list_push_back 으로 넣었다. 그러면, 가장 오랫동안 사용하지 않은 
	프래임은 frame_table에 맨앞에 있다. 따라서, swap_out() 함수를 통해 프래임을 
	내쫓을 때, frmae_table에서 list_pop_front() 함수를 사용했다.    

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
	먼저 Q는 실행을 종료하거나 swap out 을 할때 프래임을 더 이상 사용하지 않게
	된다. 전자의 경우, pagedir_destroy () 함수를 통해 page table을 없애주고 물리
	프래임 또한 free 해준다. 후자의 경우, palloc_free_page () 함수를 호출하여
	프래임을 free 해주고 pte 의 LSB을 바꿔준다. 이것은 PTE_P을 not present으로 
	바꾸어주는 것이고 이것을 통해 이 page table에 접근하면 page fault가 발생한다. 
	따라서, P 가 같은 Q 가 사용했던 프래임을 할당받아도 이미 그 프래임에
	참조되어있는 프로세스의 유저 매모리는 없기 때문에 install_page() 함수를 
	통해 유저에서부터 물리 프래임까지 mapping을 해줄 수 있다.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
	page fault 가 발생한 주소를 fault_addr 라고 지정하자. stack 에서 fault_addr
	만큼 뺀 값이 4바이트이거나 32바이트면 stack을 증가하도록 구현했다.
	x86 PUSH나 PUSHA 명령 같은 경우 스택 포인터를 조정하기 전에 액세스 권한을
	확인하기 떄문에 stack에서 4 바이트 나 32바이트 밑에서 page fault를 
	유발할 수 있기 때문이다. PUSH 나 PUSHA 같은 경우, stack에다가 새로운
	매개 변수를 저장한다. 따라서, stack을 확장해주야 한다.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
	유저 메모리를 관리해주는 upage_table는 각 프로세스마다 존재하고 
	물리 메모리를 관리해주는 frame_table이나 디스크 메모리를 관리해주는 
	swap_bitmap는 global 하다. 따라서, frame_table나 디스크 메모리에는 
	안전한 synchronziation 이 필요하다.
	할당한 물리 메모리를 관리하기 위해 frame_table이라는 구조체를 만들었다.
	frame_table을 접근할 떄마다 frame_lock 이라는 lock 을 사용하였다. 즉, 
	frame_table를 사용하는 모든 상황에 대해서 lock 을 걸어주어 프로세스 간에
	싱크를 맞추어 주었다.
	swap in 이나 out을 진행할 때 무조건 swap_lock 을 acquire 해야한 
	할 수 있도록 구현했다. 따라서, 한 process만 swap in/out 을 할 수 있도록
	제한했다. 이는 eviction을 통해 기존의 프레임안에 새로운 페이지를 할당할 때
	필요한 싱크를 맞추어 주었다.
	그리고 lock을 함수의 시작에 걸고 끝나기 직전에 풀어주어 
	이미 lock을 소유중인 상태에서 또 다른 lock을 소유할 상황을 없애주었다. 즉,
	deadlock 이 없는 것이다.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
  프로세스 P 가 프로세스 Q의 프레임을 내쫓는 경우는 swapping이다. 우리가 
	swapping을 구현한 방법은 다음과 같다. 먼저 swap disk 에다가 swap out 를
	통해 빼온 프레임을 저장하고 물리 메모리의 공간을 확보한 뒤 swap in 을
	진행하였다. 여기서 swap out 이랑 swap in 함수를 진행할 때, swap_lock 이라는
	공용 락을 사용하였다. 즉, swap out이랑 swap in 함수를 동시에 실행할 수 없도록
	구현한 것이다. 따라서, Q의 프레임이 evict를 다 할때까지, P 는 기다려야 한다.  
	또한, swap out을 하면서, 물리 메모리에서 Q의 프레임을 없애고 PTE의 present
	bit를 0으로 바꾼다. 그리고 즉, 다시 프레임에 접근하려고 하면 page fault가 나고,
  Q의 프레임은 disk 에 있으므로, 다시 swap out 을 통해 새로운 공간을 할당
	받아야 한다. 결국, 이 상황에서도 swap_lock에 걸린다. 따라서 ,안전하게 
	eviction 을 진행할 수 있다.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
	이러한 문제를 해결하기 위해 pinning / locking을 사용했다. 프로세스 P가 
	페이지를 읽어드리고 있는 도중에 swap out 되지 않도록 pin_lock 이라는 lock을 
	걸어서 페이지 로딩 과정을 방해받지 않도록 구현하였다. pin_lock은 각 struct
	page 마다 있는 lock 이다. 따라서, 로딩을 페이지 단위로 하기 때문에 각 
	페이지의 lock 을 사용하여 페이지 하나 하나를 안전하게 로딩하였다.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
	프로세스가 paged-out된 페이지를 접근하면, page fault가 발생하고 exception.c
	안에 있는 page_fault () 함수로 넘어간다. Page fault가 발생한 주소가 프로세스의 
	upage_table 안에 있거나 stack growth를 위한 주소였다면 각 케이스에 맞게
	load_segment 를 하거나 stack을 확장하였다. 그 외에 접근들은 sys_exit(-1)를 
	호출하도록 하여 실행을 중단하도록 였다. 예를 들어, fault 난 주소가 PHYS_BASE
	보다 크거나, upage_table 안에 없거나, 스택 증가를 위한 주소가 아닌 경우 
	sys_exit(-1)를 호출하였다.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
	우리는 일단 VM 시스템 전체에 락을 걸지 않았다. 예를 들어, load_segment
	함수를 실행할 때마다 lock 을 걸면 싱크를 맞추는 것은 쉬워지지만 그만큼 
	parallelism이 떨어지기 때문이다. 우리는 frame_table, bitmap 등 공용으로 
	사용되는 리소스를 접근할 때 비로서 lock을 사용하였다. 그리고 deadlock이 
	발생하지 않도록 가능한 빨리 lock 을 풀어주고 lock 이 겹치지 않도록 노력하였다.
	하지만, 구현하다보니 lock 의 개수가 생각보다 많아졌다. 코드를 분석한 결과,
	deadlock은 없을 것 같아서 그대로 냅두었다. 따라서, 우리는 락을 필요할 때만
	써서 높은 parallelism을 유도하도록 구현하였다.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- vm/page.h:

	- struct page
		{
			...
			int mapid;										/* mmap 으로 생긴 페이지일 경우의 map id */
			...		
		};

 - thread.h:

  - struct thread
    {
			...
			struct list mmap_list;				/* mmap된 유저 페이지를 관리하는 list */
			...
		}

	- struct file_elem
		{
			...
			char filename[15];	 					/* 파일의 이름 */
			int mapid;										/* mmap 실행한 파일의 map id
																			 mmap 하지 않으면 mapid 는 0이다 */
			...
		};

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
	특정 유저 페이지의 주소에 mmap을 실행하면, 그 주소도 다른 페이지와 동일하게
	upage_table안에 저장된다. 대신 0보다 큰 mapid을 지니게 된다. 따라서, 그
	페이지에 접근해서 write 나 read 를 수행하려 할 때 page fault가 일어날 
	것이고, mapid가 0이 아니기 때문에 file_reopen 함수를 수행한다. 이는 mmap을 
	실행한 파일의 inode를 그대로 참조하기 위함이다. 
	
	mmap 된 페이지를 evict하거나 mummap을 실행하거나 프로세스가 종료될 경우,
	매핑을 한 페이지에 업데이트된 정보가 있다면 그것을 file_write_at 함수를
	통해서 mmap을 실행한 파일에 다시 써준다.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
  유저 메모리에 핟당된 page은 upage_table이라는 구조체 안에 저장되어 있다.
	mmap을 통해 새로운 유저 메모리를 할당할 경우, upage_table을 사용한다.
	mmap() 은 파일의 fd와 mmap을 하려는 유저 메모리의 주소를 인자로 받는다.
	mmap을 하려는 주소에다가 fd 로 찾은 file 의 filesize를 더한 만큼의 영역을
	페이지 단위로 나눠서 각 부분이 upage_table안에 존재하는지 확인한다. 전부
	다 upage_table 안에 없다는 것은 overlapping 하는 segment가 없다는 뜻이며
	따라서, mmap의 주소 + filesize 만큼 유저 메모리에 할당한다. 단, zero_byte
	을 사용하여 정확히 페이지 단위로 할당할 수 있도록 해준다.   

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
	mmap 된 페이지도 다른 유저 메모리와 같이 struct page로 지정하고 유저 메모리를 
	관리해주는 upage_table에 저장된다. 결국 이 두 페이지의 차이는 mapid 가 있냐
	없냐의 차이기 떄문이고 mmap 된 페이지도 lazy loading을 해줘야 하기 떄문이다.
	따라서, swap out 할 때 특정 프래임이 mmap 된 프래임인지 아닌지 확인하기 위해서는 
	map id를 확인한다. 이것이 0이 아니면 mmap 을 호출한 파일에 다시 쓴다.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?